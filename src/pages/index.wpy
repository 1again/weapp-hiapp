<template>
  <view class="container">
    <repeat for="{{timeline}}" key="index" index="index" item="item">
      <card :post.sync="item"></card>
    </repeat>
    <navigator url="./publisher" class="publisher-btn">
      <image src="../assets/images/feather.png"></image>
    </navigator>
  </view>
</template>

<style lang="less" scoped>
.publisher-btn{
  width: 60px;
  height: 60px;
  background-color: #ff9630;
  position: fixed;
  bottom: 20px;
  right: 20px;
  border-radius: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: -1px 2px 9px 0px rgba(176,176,176,1);

  > image{
    width: 23px;
    height: 23px;
  }
}
</style>

<script>
import wepy from 'wepy'
import res from '@/network'
import Card from '@/components/card'
import { connect } from 'wepy-redux'
import { initTimeline, prependTimeline } from '@/store/actions'
import { getRemoteAvatar } from '@/utils'
import distanceInWordsToNow from 'date-fns/distance_in_words_to_now'

@connect({
  timeline(state) {
    return state.home.timeline
  }
}, {
  initTimeline,
  prependTimeline
})

export default class Index extends wepy.page {
  config = {
    enablePullDownRefresh: true
  }

  refreshing = false

  methods = {
  }

  events = {}

  onLoad() {
    this.getTimeline()
  }

  getTimeline() {
    wx.showToast({
      title: 'loading...',
      icon: 'loading'
    })
    res.get('/timeline.json').then(res => {
      this.methods.initTimeline(this.formatTimeline(res.data))
    }).then(res => wx.hideToast())
  }

  onPullDownRefresh() {
    if (this.refreshing) return false

    this.refreshing = true
    res.get('/refresh_timeline.json').then(res => {
      if (parseInt(this.timeline[0].id) === 48) {
        // this.$emit('show-tip')
      } else {
        const timeline = res.data
        this.methods.prependTimeline(timeline)
      }
      this.refreshing = false
      wx.stopPullDownRefresh()
    })
  }

  formatTimeline(items) {
    items.forEach(item => {
      item.avatarUrl = getRemoteAvatar(item.avatar)
      item.time = distanceInWordsToNow(item.created_at * 1000, { addSuffix: true })
      return item
    })
    return items
  }

  components = {
    card: Card
  }
}
</script>
